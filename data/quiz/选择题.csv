knowledge_point_type,question,option_A,option_B,option_C,option_D,answer,difficulty,bloom_level
数据结构基本概念和术语,研究数据结构就是研究 ()。,数据的逻辑结构,数据的存储结构,数据的逻辑结构和存储结构,数据的逻辑结构、存储结构及其基本操作,D,3,a
算法效率的度量,算法分析的两个主要方面是 ()。,空间复杂度和时间复杂度,正确性和简单性,可读性和文档性,数据复杂性和程序复杂性,A,3,a
线性表的定义,具有线性结构的数据结构是 ()。,图,树,广义表,栈,D,3,a
算法的基本概念,计算机中的算法指的是解决某一个问题的有限运算序列，它必须具备输入、输出、() 等 5 个特性。,可执行性、可移植性和可扩充性,可执行性、有穷性和确定性,确定性、有穷性和稳定性,易读性、稳定性和确定性,B,3,a
算法效率的度量, 下面程序段的时间复杂度是 ()。for (i=0;i<m;i++) for (j=0;j<n;j++) a [i][j]=ij;,O(m²),O(n),O(mn),O (m+n),C,4,b
算法的基本概念,算法是 ()。,计算机程序,解决问题的计算方法,排序算法,解决问题的有限运算序列,D,3,a
算法效率的度量,"某算法的语句执行频度为 (3n²+nlog₂n+n+8), 其时间复杂度表示 ()。",O (n),O (nlog₂n),O (n²),O (log₂n),C,4,b
算法效率的度量, 下面程序段的时间复杂度为 ()。i=1;while (i<=n) i=i3;,O (n),O (3n),O (log₃n),O (n³),C,4,b
数据结构基本概念和术语,数据结构是一门研究非数值计算的程序设计问题中计算机的数据元素以及它们之间的 () 和运算等的学科。,结构,关系,运算,算法,B,3,a
算法效率的度量,下面程序段的时间复杂度是 ()。while (s<n){ i=g=0; i++; s+=i; },O (n),O (n²),O (log₂n),O (n³),A,4,b
数据结构基本概念和术语,抽象数据类型的三个组成部分分别为 ()。,数据对象、数据关系和基本操作,数据元素、逻辑结构和存储结构,数据项、数据元素和数据类型,数据元素、数据结构和数据类型,A,3,a
算法的基本概念,通常从正确性、易读性、健壮性、高效性等 4 个方面评价算法的质量，以下解释错误的是 ()。,正确性算法应能正确地实现预定的功能,易读性算法应易于阅读和理解，以便调试、修改和扩充,健壮性当环境发生变化时，算法能适当地做出反应或进行处理，不会产生不需要的运行结果,高效性即达到所需要的时间性能,D,4,b
算法效率的度量, 下列程序段的时间复杂度为 ()。x=n;y=0; while (x>=(y+1)(y+1)) y=y+1;,O(n),O(√n),O(1),O(n²),B,5,c
数据结构基本概念和术语,数据结构是一门研究非数值计算的程序设计问题中的操作对象以及它们之间的（）和运算的学科。,结构,关系,运算,算法,B,5,a
数据结构基本概念和术语,在数据结构中，从逻辑上可以把数据结构分成（）。,动态结构和静态结构,紧凑结构和非紧凑结构,线性结构和非线性结构,逻辑结构和存储结构,C,4,a
线性表的定义，顺序表和链表的比较,线性表的逻辑顺序和存储顺序总是一致的，这种说法（）。,正确,不正确,无法确定,以上答案都不对,B,5,b
算法的基本概念，算法效率的度量,算法分析的目的是（）。,找出算法的合理性,研究算法的输人与输出关系,分析算法的有效性以求改进,分析算法的易懂性,C,3,a
算法效率的度量,算法的时间复杂度取决于（ ）,问题的规模,待处理数据的初态,A 和 B,,C,4,a
算法的基本概念,一个算法应该是（ ）。,程序,问题求解步骤的描述,要满足五个基本特性,A 和 C,B,4,b
算法的基本概念,下面关于算法说法错误的是（ ）,算法最终必须由计算机程序实现,为解决某问题的算法与为该问题编写的程序含义是相同的,算法的可行性是指指令不能有二义性,以上几个都是错误的,D,5,b
数据结构三要素,以下与数据的存储结构无关的术语是（ ）。,循环队列,链表,哈希表,栈,D,3,a
算法效率的度量,"在下面的程序段中，对 x 的赋值语句的频度为（ ）
for（i=0;i<n;i++）
 for (j=0;j<n;j++) 
 x=x+1;",2n,n,n²,log2n,C,2,a
数据结构基本概念和术语,以下数据结构中，（ ）是非线性数据结构,树,字符串,队列,栈,A,1,a
数据结构基本概念和术语,下列数据中，（ ）是线性数据结构。,哈夫曼树,有向无环图,二叉排序树,栈,D,1,a
数据结构三要素,以下属于逻辑结构的是（ ）。,顺序表,哈希表,有序表,单链表,C,3,b
线性表的基本操作，顺序表的定义,若长度为 n 的线性表采用顺序存储结构，在其第 i 个位置插入一个新元素算法的时间复杂度 ()。,O (log₂n),O (1),O (n),O (n²),C,4,b
线性表的基本操作，顺序表和链表的比较,若一个线性表中最常用的操作是取第 i 个元素和找第 i 个元素的前趋元素，则采用 () 存储方式最节省时间。,顺序表,单链表,双链表,单循环链表,A,4,b
线性表的定义,具有线性结构的数据结构是 ()。,图,树,广义表,栈,D,3,a
线性表的基本操作,在一个长度为 n 的顺序表中，在第 i 个元素之前插入一个新元素时，需向后移动 () 个元素。,n-i,n-i+1,n-i-1,i,B,4,b
循环链表,非空的循环单链表 head 的尾结点 p 满足 ()。,p->next==head,p->next==NULL,p= NULL,p==head,A,4,b
链表的存储结构,链表不具有的特点是 ()。,可随机访问任一元素,插入删除不需要移动元素,不必事先估计存储空间,所需空间与线性表长度成正比,A,3,a
双链表,在双向循环链表中，在 p 指针所指的结点后插入一个指针 q 所指向的新结点，修改指针的操作是 ()。,p->next=q;q->prior=p;p->next->prior=q;q->next=q;,p->next=q;p->next->prior=q;q->prior=p;q->next=p->next;,q->prior=p;q->next=p->next;p->next->prior=q;p->next=q;,q->next=p->next;q->prior=p;p->next=q;p->next=q;,C,5,c
链表的存储结构,线性表采用链式存储时，结点的存储地址 ()。,必须是连续的,必须是不连续的,连续与否均可,和头结点的存储地址相连续,C,3,a
线性表的基本操作,在一个长度为 n 的顺序表中删除第 i 个元素，需要向前移动 () 个元素。,n-i,n-i+1,n-i-1,i+1,A,4,b
线性表的定义,线性表是 n 个 () 的有限序列。,表元素,字符,数据元素,数据项,C,3,a
循环链表,从表中任一结点出发，都能扫描整个表的是 ()。,单链表,顺序表,循环链表,静态链表,C,3,a
单链表上基本操作的实现,在具有 n 个结点的单链表上查找值为 x 的元素时，其时间复杂度为 ()。,O (n),O (1),O (n²),O (n-1),A,3,a
线性表的定义," 线性表 L=(a1,a2,...,an), 下列说法正确的是 ()。",每个元素都有一个直接前驱和一个直接后继,线性表中至少要有一个元素,表中诸元素的排列顺序必须是由小到大或由大到小,除第一个和最后一个元素外，其余每个元素都有一个且仅有一个直接前驱和直接后继,D,4,b
顺序表的定义,"一个顺序表的第一个元素的存储地址是 90, 每个元素的长度为 2, 则第 6 个元素的存储地址是 ()。",98,100,102,106,A,4,b
顺序表和链表的比较,在线性表的下列存储结构中，读取元素花费的时间最少的是 ()。,单链表,双链表,循环链表,顺序表,D,3,a
单链表上基本操作的实现,在一个单链表中，若删除 p 所指向结点的后续结点，则执行 ()。,p->next=p->next->next;,p=p->next;p->next=p->next->next;,p=p->next;,p=p->next->next;,A,4,b
单链表上基本操作的实现,将长度为 n 的单链表连接在长度为 m 的单链表之后的算法的时间复杂度为 ()。,O (1),O (n),O (m),O (m+n),C,4,b
顺序表的定义,线性表的顺序存储结构是一种 () 存储结构。,随机存取,顺序存取,索引存取,散列存取,A,3,a
顺序表的基本操作,顺序表中，插入一个元素所需移动的元素平均数是 ()。,(n-1)/2,n,n+1,(n+1)/2,A,5,c
循环链表,循环链表的主要优点是 ()。,不再需要头指针,已知某结点位置后能容易找到其直接前驱,在进行插入、删除运算时能保证链表不断开,在表中任一结点出发都能扫描整个链表,D,3,a
单链表的定义,不带头结点的单链表 head 为空的判定条件是 ()。,head=NULL,head->next==NULL,head->next==head,head!=NULL,A,3,a
顺序表的基本操作,在下列对顺序表进行的操作中，算法时间复杂度为 O (1) 的是 ()。,访问第 i 个元素的前驱 (1<i≤n),在第 i 个元素之后插入一个新元素 (1≤i<n),删除第 i 个元素 (1≤i≤n),对顺序表中元素进行排序,A,4,b
单链表上基本操作的实现,已知指针 p 和 q 分别指向某单链表中第一个结点和最后一个结点。假设指针 s 指向另一个单链表中某个结点，则在 s 所指结点之后插入上述链表应执行的语句为 ()。,q->next=s->next;s->next=p;,s->next=p;q->next=s->next;,p->next=s->next;s->next=q;,s->next=q;p->next=s->next;,A,5,c
顺序表和链表的比较,在以下的叙述中，正确的是 ()。,线性表的顺序存储结构优于链表存储结构,线性表的顺序存储结构适用于频繁插入 / 删除数据元素的情况,线性表的链表存储结构适用于频繁插入 / 删除数据元素的情况,线性表的链表存储结构优于顺序存储结构,C,3,a
顺序表的基本操作,在表长为 n 的顺序表中，当在任何位置删除一个元素的概率相同时，删除一个元素所需移动的平均个数为 ()。,(n-1)/2,n/2,(n+1)/2,n,A,5,c
单链表上基本操作的实现,"在一个单链表中，已知 q 所指结点是 p 所指结点的前驱结点，若在 q 和 p 之间插入一个结点 s, 则执行 ()。",s->next=p->next;p->next=s;,p->next=q->next;s->next=p;,q->next=s;s->next=p;,p->next=s;s->next=q;,C,5,c
单链表上基本操作的实现,在单链表中，指针 p 指向元素为 x 的结点，实现删除 x 的后继的语句是 ()。,p=p->next;,p->next=p->next->next;,p->next=p;,p=p->next->next;,B,4,b
循环链表,"在头指针为 head 且表长大于 1 的单循环链表中，指针 p 指向表中某个结点，若 p->next->next==head, 则 ()。",p 指向头结点,p 指向尾结点,p 的直接后继是头结点,p 的直接后继是尾结点,B,5,c
顺序表上基本操作的实现,在一个长度为 n 的顺序表中删除第 i 个元素（0<i<=n）时，需要向前移动 ( ) 个元素。,n-i,n-i+1,n-i-1,i+1,A,2,a
线性表的基本操作,从一个具有 n 个元素的线性表中查找其值等于 x 的结点时，在查找成功的情况下，需平均比较 ( ) 个元素结点。,n/2,n,(n-1)/2,(n +1)/2,D,3,b
单链表上基本操作的实现,对一个具有 n 个元素的线性表，建立其单链表的时间复杂度为 ( )。,O (n),O (1),O (n²）,O（long2n）,A,2,a
单链表的定义,线性表采用链式存储时，其地址 ( )。,必须是连续的,一定是不连续的,部分地址必须连续,连续与否均可以,D,1,a
单链表上基本操作的实现,在一个具有 n 个结点的有序单链表中插人一个新的结点，使得链表仍然有序，该算法的时间复杂度是 ( )。,O（long2n）,O（l）,O（n²）,O（n）,D,3,b
线性表的定义,线性表是 ( )。,一个有限序列，可以为空,一个有限序列，不可以为空,一个无限序列，可以为空,一个无限序列，不可以为空,A,1,a
顺序表上基本操作的实现,在一个长度为 n 的顺序表中，向第 i 个位置（0 一 1＜n＋1）插入一个新元素时，需要向后移动 ( ) 个元素。,n-i,n-i＋1,n－i－1,i＋1,B,2,a
顺序表和链表的比较,如果某链表中最常用的操作是取第 i 个结点及其前驱，则采用 ( ) 存储方式最节省时间。,单链表,双向链表,单循环链表,顺序表,D,3,b
顺序表的存储结构,一个顺序存储线性表的第一个元素的存储地址是 90，每个元素的长度是 2，则第 6 个元素的存储地址是（）。,98,100,102,106,B,2,a
顺序表上基本操作的实现,在顺序存储的线性表（a1……an）中，删除任意一个结点所需移动结点的平均移动次数为 ( ),n,n／2,(n-1)/2,（n＋l）/2,C,3,b
顺序表的定义,在线性表的下列存储结构中，读取第 i 个元素花费的时间最少的是（）。,单链表,双链表,循环链表,顺序表,D,1,a
双链表，循环链表,若某链表中最常用的操作为在最后一个结点之后插入一个结点和删除最后一个结点，则采用（）存储方式最节省时间。,双链表,单链表,单循环链表,带头结点的双循环链表,D,4,c
单链表上基本操作的实现,在单链表中删除指针 p 所指结点的后继结点，则执行（ ）操作。,p->next=p->next->next,p->next=p->next,p=p->next->next,p=p->next; p->next=p->next->next,A,2,a
单链表上基本操作的实现,在一个单链表中，已知 q 所指结点是 p 所指结点的前驱，若在 q 和 p 之间插入 s 所指的结点，则执行（ ）操作。,s->next=p->next; p->next=s,q->next=s; s->next=p,p->next=s->next; s->next=p,p->next=s; s->next=q,B,3,b
单链表的定义,在单链表中附加头结点的目的是为了（ ）。,保证单链表中至少有一个节点,标识单链表中首结点的位置,方便运算的实现,说明单链表是线性表的链式存储,C,2,a
循环链表,循环单链表的主要优点是（ ）。,不再需要头指针了,从表中任意一个结点出发都能扫描到整个链表,已知某个结点的位置后，能够容易找到它的前驱,在进行插入、删除操作时，能更好地保证链表不断开,B,2,a
循环链表,非空的循环单链表 L 的尾结点 p 满足（ ）。,p->next=NULL,p=NULL,p->next=L,p=L,C,2,a
双链表,"在双向循环链表中，在 p 指针所指向的结点前插入一个指针 q 所指向的新结点，其修改指针的操作是 ( )。注：双向链表的结点结构为 (prior,data,next)。",p->prior=q； q->next=p； p->prior->next=q； q->prior=q；,p->prior=q； p->prior->next=q; q->next=p； q->prior=p->prior；,q->next=p； q->prior=p->prior；p->prior->next=q; p->prior=q;,q->prior=p->prior； q->next=p； p->prior=q； p->prior=q；,C,4,c
双链表,在双向链表存储结构中，删除 p 所指的结点时须修改指针（ ）。,p->prior->next=p->next; p->next->prior=p->prior,p->prior=p->prior->prior; p->prior->next=p;(删 p 的前趋),p->next->prior=p; p->next=p->next->next,p->next= p->prior->prior; p->prior= p->next->next,A,4,c
栈的基本概念,"一个栈的输入序列为:a,b,c,d,e, 则栈的不可能输出的序列是 ()。","a,b,c,d,e","d,e,c,b,a","d,c,e,a,b","e,d,c,b,a",C,5,c
队列的顺序存储结构,判断一个循环队列 Q (最多 n 个元素) 为满的条件是 ()。,Q->rear==Q->front,Q->rear==Q->front+1,Q->front==(Q->rear+1)% n,Q->front==(Q->rear-1)% n,C,5,c
栈在括号匹配中的应用,设计一个判别表达式中括号是否配对的算法，采用 () 数据结构最佳。,顺序表,链表,队列,栈,D,3,a
单链表的定义,带头结点的单链表 head 为空的判定条件是 ()。,head==NULL,head->next==NULL,head->next!=NULL,head!=NULL,B,3,a
栈的基本概念,"一个栈的输入序列为：1,2,3,4, 则栈的不可能输出的序列是 ()。",1243,2134,1432,4312,D,5,c
队列的顺序存储结构,"若用一个大小为 6 的数组来实现循环队列，且当 rear 和 front 的值分别为 0,3。当从队列中删除一个元素，再加入两个元素后，rear 和 front 的值分别为 ()。",1 和 5,2 和 4,4 和 2,5 和 1,B,5,c
队列的基本概念,队列的插入操作是在 ()。,队尾,队头,队列任意位置,队头元素后,A,3,a
队列的顺序存储结构,"循环队列的队头和队尾指针分别为 front 和 rear, 则判断循环队列为空的条件是 ()。",front==rear,front==0,rear==0,front=rear+1,A,3,a
栈的顺序存储结构,"一个顺序栈 s, 其栈顶指针为 top, 则将元素 e 入栈的操作是 ()。",*s->top=e;s->top++;,S->top++;*S->top=e;,S->top=e,S->top=e;,B,4,b
栈在表达式求值中的应用, 表达式 a(b+c)-d 的后缀表达式是 ()。,abcd+,abc+d-,abc+d,-+*abcd,B,5,c
栈在递归中的应用,将递归算法转换成对应的非递归算法时，通常需要使用 () 来保存中间结果。,队列,栈,链表,树,B,3,a
栈的基本概念,栈的插入和删除操作在 ()。,栈底,栈顶,任意位置,指定位置,B,3,a
栈的基本概念,"五节车厢以编号 1,2,3,4,5 顺序进入铁路调度站 (栈), 可以得到 () 的编组。","3,4,5,1,2","2,4,1,3,5","3,5,4,2,1","1,3,5,2,4",C,5,c
栈的顺序存储结构,判定一个顺序栈 s (栈空间大小为 n) 为空的条件是 ()。,S->top==0,S->top!=0,S->top==n,S->top!=n,A,3,a
队列的链式存储结构,在一个链队列中，front 和 rear 分别为头指针和尾指针，则插入一个结点 s 的操作为 ()。,front=front->next,s->next=rear;rear=s;,rear->next=s; rear=s;,s->next=front;front=s;,C,4,b
队列的基本概念,"一个队列的入队序列是 1,2,3,4, 则队列的出队序列是 ()。","1,2,3,4","4,3,2,1","1,4,3,2","3,4,1,2",A,3,a
队列的基本概念,"依次在初始为空的队列中插入元素 a,b,c,d 以后，紧接着做了两次删除操作，此时的队头元素是 ()。",a,b,c,d,C,3,a
栈的顺序存储结构,正常情况下，删除非空的顺序存储结构的堆栈的栈顶元素，栈顶指针 top 的变化是 ()。,top 不变,top=0,top=top+1,top=top-1,D,3,a
队列的顺序存储结构,判断一个循环队列 Q (空间大小为 M) 为空的条件是 ()。,Q->front==Q->rear,Q->rear-Q->front-1==M,Q->front+1=Q->rear,Q->rear+1=Q->front,A,3,a
栈在括号匹配中的应用,设计一个判别表达式中左右括号是否配对出现的算法，采用 () 数据结构最佳。,线性表的顺序存储结构,队列,栈,线性表的链式存储结构,C,3,a
队列的顺序存储结构,当用大小为 N 的数组存储顺序循环队列时，该队列的最大长度为 ()。,N,N+1,N-1,N-2,C,4,b
队列的基本概念,队列的删除操作是在 ()。,队首,队尾,队前,队后,A,3,a
栈的基本概念,"若让元素 1,2,3 依次进栈，则出栈次序不可能是 ()。","3,2,1","2,1,3","3,1,2","1,3,2",C,5,c
队列的顺序存储结构,"循环队列用数组 A [0,m-1] 存放其元素值，已知其头尾指针分别是 front 和 rear, 则当前队列中的元素个数是 ()。",(rear-front+m)% m,rear-front+1,rear-front-1,rear-front,A,5,c
队列在计算机系统中的应用,在解决计算机主机和打印机之间速度不匹配问题时，通常设置一个打印数据缓冲区，主机将要输出的数据依次写入该缓冲区，而打印机则从该缓冲区中取走数据打印。该缓冲区应该是一个 () 结构。,堆栈,队列,数组,线性表,B,3,a
栈和队列的基本概念,栈和队列都是 ()。,链式存储的线性结构,链式存储的非线性结构,限制存取点的线性结构,限制存取点的非线性结构,C,3,a
队列的链式存储结构,在一个链队列中，假定 front 和 rear 分别为队头指针和队尾指针，删除一个结点的操作是 ()。,front=front->next,rear= rear->next,rear->next=front,front->next=rear,A,4,b
栈和队列的基本概念,栈和队列的主要区别是 ()。,逻辑结构不同,存储结构不同,所包含的运算个数不同,限定插入和删除的位置不同,D,3,a
栈的基本概念,一个栈的序列是：a，b，c，d，e，则栈的不可能输出的序列是（）。,a，b，c，d，e,d，e，c，b，a,d，c，e，a，b,e，d，c，b，a,C,5,c
栈的基本概念,若一个栈的输人序列是 1，2，3，…，n，输出序列的第一个元素是 n，则第 k 个输出元素是（ ）。,k,n-k-1,n-k+1,不确定,C,4,b
栈的顺序存储结构,判定一个栈 S（最多有 n 个元素）为空的条件是（ ）。,S->top！＝0,S->top= =0,S->top!=n,S->top= =n,B,1,a
栈的顺序存储结构,判定一个栈 S（最多有 n 个元素）为满的条件是（ ）。,S->top!=0,S->top= =0,S->top!=n,S->top= =n,D,1,a
栈的链式存储结构, 向一个栈顶指针为 top 的不带头结点的链栈中插人一个S 结点的时候，应当执行语句（ ）。,top->next=S,S->next=top；top=S,S->next＝top->next；top->next＝S,S->next＝top；top＝S->next,B,3,b
栈的链式存储结构, 向一个带头结点、栈顶指针为 top 的链栈中插人一个S 结点的时候，应当执行语句（ ）。,top->next=S,S->next=top；top=S,S->next=top->next；top->next=S,S->next=top；top=S->next,C,3,b
队列的顺序存储结构,判定一个队列 Q（最多有 n 个元素）为空的条件是（ ）。,Q->rear-Q->front= =n,Q->rear-Q->front+1= =n,Q->rear = = Q->front,Q->rear +1= = Q->front,C,1,a
队列的顺序存储结构,判定一个队列 Q（最多有 n 个元素）为满的条件是（）。,Q->rear-Q->front= =n,Q->rear-Q->front+1= =n,Q->rear = = Q->front,Q->rear +1= = Q->front,A,2,a
循环队列,判定一个循环队列 Q（最多有 n 个元素）为空的条件是（ ）。,Q->rear = = Q->front,Q->rear = = Q->front＋l,Q->front= =(Q->rear +1)％n,Q->front= =(Q->rear -1)％n,A,2,a
循环队列,判定一个循环队列 Q（最多有 n 个元素）为满的条件是（ ）。,Q->rear = = Q->front,Q->rear = = Q->front＋l,Q->front= =(Q->rear +1)％n,Q->front= =(Q->rear -1)％n,C,3,b
队列的链式存储结构,在一个链队列中，假定 front 和 rear 分别为头指针和尾指针，则插入一个结点 * S 的操作是（ ）。,front＝front->next,S->next=rear；rear=S,rear->next=S；rear=S,S->next=front；front＝S,C,2,a
队列的链式存储结构,在一个链队列中，假定 front 和 rear 分别为头指针和尾指针，删除一个结点的操作是（ ）。,front=front->next,rear=rear->next,rear->next=front,front->next＝rear,A,2,a
栈的基本概念，队列的基本概念,栈与队列都是（ ）。,链式存储的线性结构,链式存储的非线性结构,限制存取点的线性结构,限制存取点的非线性结构,C,1,a
栈的基本概念,若进栈序列为 l，2，3，4，则（ ）不可能是一个出栈序列。,3，2，4，1,l，2，3，4,4，2，3，1,4，3，2，l,C,5,c
队列的应用,在解决计算机主机与打印机之间速度不匹配问题时通常设置一个打印数据缓冲区，主机将要输出的数据依次写人该缓冲区，而打印机则从该缓冲区中取走数据打印。该缓冲区应该是一个（ ）结构。,堆栈,队列,数组,线性表,B,2,a
串的模式匹配算法 ——KMP 算法,"设有两个串 s1 和 s2, 求串 s2 在 s1 中首次出现位置的运算称作 ()。",连接,求子串,模式匹配,判断子串,C,3,a
串的模式匹配算法 ——KMP 算法,"已知串 S=aaab, 则 next 数组值为 ()。",123,1123,1231,1211,A,5,c
串的定义,串与普通的线性表相比较，它的特殊性体现在 ()。,顺序的存储结构,链式存储结构,数据元素是一个字符,数据元素任意,C,3,a
串的模式匹配算法 ——KMP 算法,"设串长为 n, 模式串长为 m, 则 KMP 算法所需的附加空间为 ()。",O (m),O (n),O (m*n),O (nlog₂m),A,5,c
串的定义,空串和空格串 ()。,相同,不相同,可能相同,无法确定,B,3,a
串的基本操作,与线性表相比，串的插入和删除操作的特点是 ()。,通常以串整体作为操作对象,需要更多的辅助空间,算法的时间复杂度较高,涉及移动的元素更多,A,4,b
串的基本操作,"设 SUBSTR (S,i,k) 是求 s 中从第 i 个字符开始的连续 k 个字符组成的子串的操作，则对于 s=Beijing&NanjingSUBSTR (S,4,5)=()。",ijing,jing&,ingNa,ing&N,B,4,b
广义表的定义,"设广义表 L=((a,b,c)), 则 L 的长度和深度分别为 ()。",1 和 1,1 和 3,1 和 2,2 和 3,C,4,b
广义表的定义,"广义表 ((a),a) 的表尾是 ()。",a,(a),(),((a)),B,4,b
稀疏矩阵的压缩存储,稀疏矩阵的常见压缩存储方法有 () 两种。,二维数组和三维数组,三元组和散列表,三元组和十字链表,散列表和十字链表,C,3,a
广义表的定义,一个非空广义表的表头 ()。,不可能是子表,只能是子表,只能是原子,可以是子表或原子,D,3,a
数组的存储结构,"数组 A [0..5,0..6] 的每个元素占 5 个字节，将其按列优先次序存储在起始地址为 1000 的内存单元中，则元素 A [5][5] 的地址是 ()。",1175,1180,1205,1210,A,5,c
广义表的定义,"广义表 G=(a,b,(c,d,(e,f),g) 的长度是 ()。",3,4,7,8,A,4,b
稀疏矩阵的压缩存储,采用稀疏矩阵的三元组表形式进行压缩存储，若要完成对三元组表进行转置，只要将行和列对换，这种说法 ()。,正确,错误,无法确定,以上均不对,B,4,b
广义表的定义,"广义表 (a,b,c) 的表尾是 ()。","b,c","(b,c)",c,(c),B,3,a
数组的定义,常对数组进行两种基本操作是 ()。,建立和删除,索引和修改,查找和修改,查找与索引,C,3,a
特殊矩阵的压缩存储,对一些特殊矩阵采用压缩存储的目的主要是为了 ()。,表达变得简单,对矩阵元素的存取变得简单,去掉矩阵中的多余元素,减少不必要的存储空间的开销,D,3,a
特殊矩阵的压缩存储,"设有一个 10 阶的对称矩阵 A, 采用压缩存储方式，以行序为主存储，a11 为第一个元素，其存储地址为 1, 每元素占 1 个地址空间，则 a85 的地址为 ()。",13,33,18,40,B,6,d
特殊矩阵的压缩存储,"设矩阵 A 是一个对称矩阵，为了节省存储，将其下三角部分按行序存放在一维数组 B [1..n (n-1)/2] 中，对下三角部分中任一元素 ai,j (i≥j), 在一维数组 B 的下标位置 k 的值是 ()。",i (i-1)/2+j-1,i (i-1)/2+j,i (i+1)/2+j-1,i (i+1)/2+j,B,6,d
广义表的定义,"广义表 A=((a),a) 的表头是 ()。",a,(a),b,((a)),B,4,b
稀疏矩阵的压缩存储,稀疏矩阵一般的压缩存储方法有两种，即 ()。,二维数组和三维数组,三元组和散列,三元组和十字链表,散列和十字链表,C,3,a
串的定义,空串与空格串（ ）。,相同,不相同,可能相同,无法确定,B,1,a
串的模式匹配算法,设有两个申 S1 与 S2，求串 S2 在 S1 中首次出现位置的运算称作（ ）。,连接,求子串,模式匹配,判子串,C,1,a
串的定义,串与普通的线性表相比较，它的特殊性体现在（ ）。,顺序的存储结构,链接的存储结构,数据元素是一个字符,数据元素可以任意,C,1,a
串的基本操作,设有串 S=‘Computer’，则其子串的数目是（ ）。,36,37,8,9,A,3,b
数组的定义,数组常用的两种基本操作是（ ）。,建立与查找,删除与查找,插人与索引,查找与修改,D,1,a
稀疏矩阵,对稀疏矩阵进行压缩存储，常用的两种方法是（ ）。,二元组和散列表,三元组表和十字链表,三角矩阵和对角矩阵,对角矩阵和十字链表,B,2,a
稀疏矩阵,采用稀疏矩阵的三元组表形式进行压缩存储，若要完对三元组表进行成转置，只要将行和列对换，这种说法（ ）。,正确,错误,无法确定,以上均不对,B,3,b
广义表的概念,一个广义表的表头总是一个广义表，这种说法（ ）。,正确,错误,无法确定,以上均不对,B,3,b
广义表的概念,一个广义表的表尾总是一个广义表，这种说法（ ）。,正确,错误,无法确定,以上均不对,A,3,b
广义表的表头表尾,广义表 ((a)) 的表头是（ ）。,（ ）,a,（a）,（（a））,C,3,b
广义表的表头表尾,广义表（（a））的表尾是（ ）。,（）,a,（a）,（（a））,A,3,b
广义表的表头表尾,广义表（（a），a）的表头是（ ）。,（ ）,a,（a）,（（a））,C,3,b
广义表的表头表尾,广义表（（a），a）的表尾是（ ）。,( ),a,（a）,（（a））,C,4,c
广义表的表头表尾,广义表（a，b，c）的表头是（ ）。,a,（a）,a，b,（b，c）,A,2,a
广义表的表头表尾,广义表（a，b，c）的表尾是（ ）。,b，c,（b，c）,a．b，c,（a，b，c）,B,2,a
广义表的操作,广义表 A 满足 Head（）= Tail（），则 A 为（）。,（）,（（））,（（），（））,（（），（），（））,B,5,d
二叉树的定义及其主要特性,"二叉树的深度为 k, 则二叉树最多有 () 个结点。",2k,2^(k-1),2^k-1,2k-1,C,3,a
二叉树的存储结构,用顺序存储的方法，将完全二叉树中所有结点按层逐个从左到右的顺序存放在一维数组 R [1..N] 中，若结点 R [i] 有右孩子，则其右孩子是 ()。,R [2i-1],R [2i+1],R [2i],R [2/i],B,4,b
二叉树的遍历,"设 a,b 为一棵二叉树上的两个结点，在中序遍历时，a 在 b 前面的条件是 ()。",a 在 b 的右方,a 在 b 的左方,a 是 b 的祖先,a 是 b 的子孙,B,4,b
二叉树的遍历,"设一棵二叉树的中序遍历序列:badce, 后序遍历序列:bdeca, 则二叉树先序遍历序列为 ()。",adbce,decab,debac,abcde,D,6,d
二叉树的定义及其主要特性,在一棵具有 5 层的满二叉树中结点总数为 ()。,31,32,33,16,A,4,b
二叉树的遍历,由二叉树的前序和后序遍历序列 () 惟一确定这棵二叉树。,能,不能,无法确定,以上均不对,B,4,b
二叉树的遍历,"某二叉树的中序序列为 ABCDEFG, 后序序列为 BDCAFGE, 则其左子树中结点数目为 ()。",3,2,4,5,C,6,d
哈夫曼树和哈夫曼编码,"若以 (4,5,6,7,8) 作为权值构造哈夫曼树，则该树的带权路径长度为 ()。",67,68,69,70,C,5,c
二叉树的存储结构,"将一棵有 100 个结点的完全二叉树从根这一层开始，每一层上从左到右依次对结点进行编号，根结点的编号为 1, 则编号为 49 的结点的左孩子编号为 ()。",98,99,50,48,A,5,c
栈在表达式求值中的应用,表达式 a*(b+c)-d÷ 的后缀表达式是 ()。,abcd+,abc+d,abc+d,#NAME?,B,5,c
二叉树的遍历,"对某二叉树进行先序遍历的结果为 ABDEFC, 中序遍历的结果为 DBFEAC, 则后序遍历的结果是 ()。",DBFEAC,DFEBCA,BDFECA,BDEFAC,B,6,d
树的定义,树最适合用来表示 ()。,有序数据元素,无序数据元素,元素之间具有分支层次关系的数据,元素之间无联系的数据,C,3,a
栈在表达式求值中的应用, 表达式 A(B+C)/(D-E+F) 的后缀表达式是 ()。,AB+C/D-E+F,ABC+D/E-F+,ABC+DE-F+/,ABCDED+/-+,C,5,c
线索二叉树,在线索二叉树中，t 所指结点没有左子树的充要条件是 ()。,t->left=NULL,t->ltag==1,t->ltag==1&&t->left==NULL,以上都不对,B,5,c
二叉树的遍历,任何一棵二叉树的叶结点在先序、中序和后序遍历序列中的相对次序 ()。,不发生改变,发生改变,不能确定,以上都不对,A,4,b
二叉树的定义及其主要特性,"假定在一棵二叉树中，度为 2 的结点数为 15, 度为 1 的结点数为 30, 则叶子结点数为 () 个。",15,16,17,47,B,4,b
二叉树的定义,在下列情况中，可称为二叉树的是 ()。,每个结点至多有两棵子树的树,哈夫曼树,每个结点至多有两棵子树的有序树,每个结点只有一棵子树,B,4,b
二叉树的存储结构,用顺序存储的方法，将完全二叉树中所有结点按层逐个从左到右的顺序存放在一维数组 R [1..N] 中，若结点 R [i] 有左孩子，则其左孩子是 ()。,R [2i-1],R [2i+1],R [2i],R [2/i],C,4,b
二叉树的定义,下面说法中正确的是 ()。,度为 2 的树是二叉树,度为 2 的有序树是二叉树,子树有严格左右之分的树是二叉树,子树有严格左右之分，且度不超过 2 的树是二叉树,D,4,b
树、森林与二叉树的转换,树的先根序列等同于与该树对应的二叉树的 ()。,先序序列,中序序列,后序序列,层序序列,A,4,b
二叉树的定义,按照二叉树的定义，具有 3 个结点的二叉树有 () 种。,3,4,5,6,C,4,b
哈夫曼树和哈夫曼编码,"由权值为 3,6,7,2,5 的叶子结点生成一棵哈夫曼树，它的带权路径长度为 ()。",51,23,53,74,A,5,c
二叉树的遍历,在二叉树后序遍历中，任一个结点均在其子女结点后面，这种说法（ ）。,,不正确,无法判断,以上均不对,A,1,a
二叉树的遍历,在二叉树先序遍历中，任一个结点均在其子女结点前面，这种说法（ ）。,正确,不正确,无法判断,以上均不对,A,1,a
二叉树的性质,设深度为 h 的二叉树上只有叶子结点和同时具有左右子树的结点，则此类二叉树中所包含的结点数目至少为（ ）。,2h,2h,2h＋1,2h-l,D,4,c
二叉树的性质,二叉村第 k 层上最多有（ ）个结点。,2k,2k-1,2k-1,2k+1,C,1,a
二叉树的性质,二叉树的深度为 k，则二叉树最多有（ ）个结点。,2k,2k-1,2k-1,2k -1,C,1,a
二叉树的遍历,设某一二叉树先序遍历为 abdec，中序遍历为 dbeac，则该二叉树后序遍历的顺序是（ ）。,abdec,debac,debca,abedc,C,5,d
二叉树的遍历,设某一二叉树中序遍历为 badce，后序遍历为 bdeca，则该二叉树先序遍历的顺序是（ ）。,adbec,decab,debac,abode,D,5,d
树、森林与二叉树的转换,将一棵树 T 转换为一棵二叉树 T2，则 T 的先序遍历是 T2 的（ ）。,先序,中序,后序,无法确定,A,3,b
树、森林与二叉树的转换,将一棵树 T 转换为一棵二叉树 T2，则 T 的后序遍历是 T2 的（ ）。,先序,中序,后序,无法碉定,B,3,b
树的定义,树最适合于用来表示（ ）。,线性结构的数据,顺序结构的数据,元素之间无前驱和后继关系的数据,元素之间有包含和层次关系的数据,D,1,a
二叉树的遍历,二叉树的叶子结点在先序、中序和后序遍历过程中的相对秩序（ ）。,发生改变,不发生改变,无法确定,以上均不正确,B,3,b
二叉树的性质,设一棵二叉树度为 2 的结点数是 7，度为 1 的结点数是 6，则叶子结点数是（ ）。,6,7,8,9,C,2,a
完全二叉树的顺序存储,用顺序存储的方法，将完全二叉树中所有结点按层逐个从左到右的顺序存放在一维数组 R [1．．n] 中，若结点 R [i] 有左孩子，则其左孩子是（ ）。,R [2i-1],R [2i+1],R [2i],R [2/i],C,2,a
完全二叉树的顺序存储,用顺序存储的方法，将完全二叉树中所有结点按层逐个从左到右的顺序存放在一维数组 R [1．．n] 中，若结点 R [i] 有右孩子，则其右孩子是（ ）。,R [2i-1],R [2i＋l],R [2i],R [2/i],B,2,a
二叉树的遍历,一棵非空的二叉树，先序遍历与后序遍历正好相反，则该二叉树满足（ ）。,无左孩子,无右孩子,只有一个叶子结点,任意二叉树,C,4,c
二叉树的遍历,设 a、b 为一棵二叉树的两个结点，在后序遍历中，a 在 b 前的条件是（ ）。,a 在 b 上方,a 在 b 下方,a 在 b 左方,a 在 b 右方,C,3,b
线索二叉树,线索二叉树是一种（ ）。,逻辑结构,线性结构,逻辑和线性结构,物理结构,D,2,a
线索二叉树,N 个结点的线索二叉树中，线索的数目是（ ）。,N-1,N＋1,2N,2N－1,B,4,c
哈夫曼树和哈夫曼编码,权值为｛l，2，6，8｝的四个结点构成的哈夫曼树的带权路径长度是（ ）。,18,28,19,29,B,4,c
线索二叉树,实现任意二叉树的后序遍历的非递归算法而不使用栈结构，最佳方案是二叉村采用（ ）存储结构。,二叉链表,广义表存储结构,三叉链表,顺序存储结构,C,5,d
满二叉树的性质,对一个满二叉树，m 个树叶，k 个分枝结点，n 个结点，则（ ）。,n＝m＋1,m+1=2n,m＝k-1,n=2k+1,D,3,b
平衡二叉树,具有五层结点的二叉平衡树至少有（ ）个结点。,10,12,15,17,B,5,d
二叉树的遍历,设 n，m 为一棵二叉树上的二个结点，在中序遍历时，n 在 m 前的条件是（ ）。,n 在 m 右方,n 是 m 祖先,n 在 m 左方,n 是 m 子孙,C,2,a
线索二叉树,线索二又树是一种（ ）结构。,逻辑,逻辑和物理,物理,线性,C,2,a
完全二叉树的顺序存储,将一棵有 100 个结点的完全二又树从根这一层开始，每一层上从左到右依次对结点进行编号，根结点的编号为 1，则编号为 49 的结点的左孩子编号为（ ）。,98,99,50,48,A,3,b
图的存储结构 - 邻接矩阵法,对于具有 n 个顶点的图，若采用邻接矩阵表示，则该矩阵的大小为 ()。,n,n×n,n-1,(n-1)²,B,3,a
图的遍历与图的连通性,如果从无向图的任一顶点出发进行一次深度优先搜索即可访问所有顶点，则该图一定是 ()。,完全图,连通图,有回路,一棵树,B,3,a
关键路径,关键路径是事件结点网络中 ()。,从源点到汇点的最长路径,从源点到汇点的最短路径,最长的回路,最短的回路,A,4,b
拓扑排序,下面 () 可以判断出一个有向图中是否有环 (回路)。,广度优先遍历,拓扑排序,求最短路径,求关键路径,B,4,b
图的存储结构 - 邻接矩阵法,带权有向图 G 用邻接矩阵 A 存储，则顶点 i 的入度等于 A 中 ()。,第 i 行非无穷的元素之和,第 i 列非无穷的元素个数之和,第 i 行非无穷且非 0 的元素个数,第 i 行与第 i 列非无穷且非 0 的元素之和,B,5,c
图的遍历 - 深度优先搜索,采用邻接表存储的图，其深度优先遍历类似于二叉树的 ()。,中序遍历,先序遍历,后序遍历,按层次遍历,B,4,b
图的存储结构 - 邻接矩阵法,无向图的邻接矩阵是一个 ()。,对称矩阵,零矩阵,上三角矩阵,对角矩阵,A,3,a
队列的顺序存储结构,当利用大小为 N 的数组存储循环队列时，该队列的最大长度为 ()。,N,N+1,N-1,N-2,C,4,b
图的存储结构 - 邻接表法,邻接表是图的一种 ()。,顺序存储结构,链式存储结构,索引存储结构,散列存储结构,B,3,a
拓扑排序,下面有向图所示的拓扑排序的结果序列是 ()。,125634,516234,123456,521643,A,5,c
图的基本概念,在无向图中定义顶点 vi 与 vj 之间的路径为从 vi 到 vj 的一个 ()。,顶点序列,边序列,权值总和,边的条数,A,3,a
图的存储结构 - 邻接表法,在有向图的逆邻接表中，每个顶点邻接表链接着该顶点所有 () 邻接点。,入边,出边,入边和出边,不是出边也不是入边,A,4,b
图的基本概念," 设 G1=(V 1,E1)和 G2=(V2 ,E2)为两个图，如果V1⊆V2, E1⊆E2则称 ()。",G1 是 G2 的子图,G2 是 G1 的子图,G1 是 G2 的连通分量,G2 是 G1 的连通分量,A,3,a
图的存储结构 - 邻接矩阵法,已知一个有向图的邻接矩阵表示，要删除所有从第 i 个结点发出的边，应 ()。,将邻接矩阵的第 i 行删除,将邻接矩阵的第 i 行元素全部置为 0,将邻接矩阵的第 i 列删除,将邻接矩阵的第 i 列元素全部置为 0,B,4,b
拓扑排序,任一个有向图的拓扑序列 ()。,不存在,有一个,一定有多个,有一个或多个,D,4,b
图的基本概念,在一个无向图 G 中，所有顶点的度数之和等于所有边数之和的（ ）倍。,l/2,1,2,4,C,1,a
图的基本概念,在一个有向图中，所有顶点的入度之和等于所有顶点的出度之和的（）倍。,l/2,1,2,4,B,1,a
图的连通性,一个具有 n 个顶点的无向联通图至少包含（ ）条边。,n,n＋1,n-1,n/2,C,1,a
完全图的概念,一个具有 n 个顶点的无向完全图包含（ ）条边。,n (n-l),n (n+l),n (n-l)/2,n (n+l)/2,C,1,a
完全图的概念,一个具有 n 个顶点的有向完全图包含（ ）条边。,n (n-1),n (n+l),n (n-l)/2,n (n+l)/2,A,1,a
图的存储结构,对于具有 n 个顶点的图，若采用邻接矩阵表示，则该矩阵的大小为（ ）。,n,n²,n-1,(n-l)²,B,1,a
邻接表法,对于一个具有 n 个顶点和 e 条边的无向图，若采用邻接表表示，则表头向量的大小为（ ）。,n,e,2n,2e,A,1,a
邻接表法,对于一个具有 n 个顶点和 e 条边的无向图，若采用邻接表表示，则所有顶点邻接表中的结点总数为（ ）。,n,e,2n,2e,D,2,a
邻接表法,在有向图的邻接表中，每个顶点邻接链表链接着该顶点所有（ ）邻接点。,入边,出边,入边和出边,不是入边也不是出边,B,2,a
逆邻接表法,在有向图的逆邻接表中，每个顶点邻接链表链接着该顶点所有（ ）邻接点。,入边,出边,入边和出边,不是人边也不是出边,A,2,a
图的遍历,下列说法中不正确的是（ ）。,无向图中的极大连通子图称为连通分量,连通图的广度优先搜索中一般要采用队列来暂存刚访问过的顶点,图的深度优先搜索中一般要采用栈来暂存刚访问过的顶点,有向图的遍历不可采用广度优先搜索方法,D,3,b
生成树的概念,"设无向连通图 G=(V, E) 和 G’= (V’, E’)，如果 G’为 G 的生成树，则下列说法中不正确的是（ ）。",G’为 G 的连通分量,G’为 G 的无环子图,G’为 G 的子图,G’为 G 的极小连通子图且 V’＝V,A,3,b
图的连通性,如果无向图 G 必须进行二次广度优先搜索才能访问其所有顶点，则下列说法中不正确的是（ ）。,G 肯定不是完全图,G 一定不是连通图,G 中一定有回路,G 有二个连通分量,C,3,b
图的存储结构,邻接表是图的一种（ ）。,顺序存储结构,链式存储结构,索引存储结构,散列存储结构,B,1,a
图的连通性,如果从无向图的任一顶点出发进行一次深度优先搜索即可访问所有顶点，则该图一定是（ ）。,完全图,连通图,有回路,一棵树,B,1,a
图的遍历,下列有关图遍历的说法不正确的是（ ）。,连通图的深度优先搜索是一个递归过程,图的广度优先搜索中邻接点的寻找具有 “先进先出” 的特征,非连通图不能用深度优先搜索法,图的遍历要求每一顶点仅被访问一次,C,3,b
生成树的概念,一个无向连通图的生成树是含有该连通图的全部顶点的（ ）。,极小连通子图,极小子图,极大连通子图,极大子图,A,2,a
邻接矩阵法,无向图的邻接矩阵是一个（ ）。,对称矩阵,零矩阵,上三角矩阵,对角矩阵,A,1,a
图的深度优先搜索,已知一个图如下图所示，若从顶点 a 出发按深度优先搜索法进行遍历，则可能得到的一种顶点序列为（ ）。,abecdf,acfebd,acebfd,acfdeb,C,4,c
图的基本概念,"在一个有向图中,所有顶点的入度之和等于所有顶点的出度之和的()倍。",1月2日,1,2,4,B,3,a
图的遍历-广度优先搜索,图的广度优先遍历类似于二叉树的()。,先序遍历,中序遍历,后序遍历,层序遍历,D,3,a
图的遍历-深度优先搜索,图的深度优先遍历类似于二叉树的()。,先序遍历,中序遍历,后序遍历,层序遍历,A,3,a
最小生成树-Prim算法,"用Prim算法求一个连通的带权图的最小代价生成树,在算法执行的某时刻,已选取的顶点集合U={1,2,3},已选取的边集合TE={(1,2),(2,3)},要选取下一条权值最小的边,应当从()组中选取。","所有顶点u∈U,顶点v∈V-U的边(u,v)","所有顶点u∈V-U,顶点v∈V-U的边(u,v)","所有顶点u∈V-U,顶点v∈U的边(u,v)","所有顶点u∈U,顶点v∈U的边(u,v)",A,4,b
图的基本概念,"在一个具有n个顶点的无向完全图中,包含有()条边。",n(n-1)/2,n(n-1),n(n+1)/2,n²,A,3,a
图的基本概念,"在一个具有n个顶点的有向完全图中,包含有()条边。",n(n-1)/2,n(n-1),n(n+1)/2,n²,B,3,a
关键路径,"在AOE网中,关键路径上活动的时间延长多少,整个工程的时间也就随之延长多少。因此,要想缩短整个工程的工期,必须加快()上活动的进度。",最短路径,最长路径,关键路径,所有路径,C,4,b
最短路径-Dijkstra算法,Dijkstra算法用于求解图中()。,所有顶点到某一顶点的最短路径,某一顶点到所有顶点的最短路径,所有顶点到所有顶点的最短路径,图的最小生成树,B,4,b
最短路径-Floyd算法,Floyd算法用于求解图中()。,所有顶点到某一顶点的最短路径,某一顶点到所有顶点的最短路径,所有顶点到所有顶点的最短路径,图的最小生成树,C,4,b
图的存储结构-邻接表法,"在有向图的邻接表存储结构中,顶点v在邻接表中出现的次数是()。",顶点v的度,顶点v的出度,顶点v的入度,依附于顶点v的边数,C,4,b
最小生成树-Kruskal算法,Kruskal算法的时间复杂度为()。,O(n),O(n²),O(eloge),O(n³),C,4,b
最小生成树-Prim算法,Prim算法的时间复杂度为()。,O(n),O(n²),O(eloge),O(n³),B,4,b
图的遍历-深度优先搜索,"对于一个具有n个顶点和e条边的无向图,若采用邻接表表示,则所有顶点邻接表中的边结点总数为()。",e/2,e,2e,n+e,C,4,b
图的遍历-广度优先搜索,广度优先遍历类似于二叉树的()。,先序遍历,中序遍历,后序遍历,层次遍历,D,3,a
图的基本概念,"在一个无向图中,所有顶点的度数之和等于边数的()倍。",1月2日,1,2,4,C,3,a
图的存储结构-邻接矩阵法,"在一个有n个顶点的无向图中,若采用邻接矩阵表示,则该矩阵的大小为()。",n,n×n,n-1,n+1,B,3,a
图的存储结构-邻接表法,"在一个有n个顶点和e条边的无向图中,若采用邻接表表示,则表头向量的大小为()。",n,n+1,n-1,e,A,3,a
图的存储结构-邻接表法,"在一个有n个顶点和e条边的无向图中,若采用邻接表表示,则表中的边结点总数为()。",e/2,e,2e,n+e,C,3,a
图的遍历-深度优先搜索,"已知一个图的邻接表存储结构,若要删除所有从顶点v发出的边,则需要遍历()。",整个邻接表,邻接表中顶点v的单链表,邻接表中所有顶点的单链表,邻接表中顶点v的单链表和所有顶点的单链表,B,4,b
图的遍历-广度优先搜索,"在图的广度优先遍历算法中,需要使用的辅助数据结构是()。",栈,队列,树,图,B,3,a
图的遍历-深度优先搜索,"在图的深度优先遍历算法中,需要使用的辅助数据结构是()。",栈,队列,树,图,A,3,a
图的基本概念,"一个有n个顶点的无向连通图,其边数至少为()。",n-1,n,n+1,nlogn,A,3,a
图的基本概念,"一个有n个顶点的有向强连通图,其边数至少为()。",n-1,n,n+1,n(n-1),B,4,b
图的遍历-深度优先搜索,"在一个有向图中,若存在一个顶点v,从该顶点出发可以到达图中所有其他顶点,则称该图为()。",强连通图,弱连通图,单侧连通图,连通图,C,4,b
图的遍历-深度优先搜索,"在一个有向图中,若对于每一对顶点u和v,都存在从u到v和从v到u的路径,则称该图为()。",强连通图,弱连通图,单侧连通图,连通图,A,3,a
图的遍历-深度优先搜索,"在一个有向图中,若将其边视为无向边后得到的无向图是连通的,则称该有向图为()。",强连通图,弱连通图,单侧连通图,连通图,B,3,a
图的基本概念,"在一个具有n个顶点的无向图中,若要保证图是连通的,则至少需要()条边。",n-1,n(n-1)/2,n(n-1),n,A,3,a
图的基本概念,"在一个具有n个顶点的有向图中,若要保证图是强连通的,则至少需要()条边。",n-1,n,n(n-1)/2,n(n-1),B,4,b
图的遍历-深度优先搜索,"在一个有向图中,若存在一个顶点v,从该顶点出发可以到达图中所有其他顶点,则称该图为()。",强连通图,弱连通图,单侧连通图,连通图,C,4,b
图的遍历-深度优先搜索,"在一个有向图中,若对于每一对顶点u和v,都存在从u到v和从v到u的路径,则称该图为()。",强连通图,弱连通图,单侧连通图,连通图,A,3,a
图的遍历-深度优先搜索,"在一个有向图中,若将其边视为无向边后得到的无向图是连通的,则称该有向图为()。",强连通图,弱连通图,单侧连通图,连通图,B,3,a
图的基本概念,"在一个具有n个顶点的无向图中,若要保证图是连通的,则至少需要()条边。",n-1,n(n-1)/2,n(n-1),n,A,3,a
图的基本概念,"在一个具有n个顶点的有向图中,若要保证图是强连通的,则至少需要()条边。",n-1,n,n(n-1)/2,n(n-1),B,4,b
顺序查找,在顺序表中进行顺序查找，其平均查找长度为 ()。,(n+1)/2,n/2,n,log₂n,A,3,a
折半查找,对长度为 n 的有序顺序表进行折半查找，其平均查找长度为 ()。,O (log₂n),O (n),O (nlog₂n),O (n²),A,4,b
折半查找,"折半查找有序表 (4,6,10,12,18,20,24,26,30,32,36), 若查找元素 20, 需进行 () 次比较。",2,3,4,5,B,4,b
分块查找,分块查找中，若索引表和块内均采用顺序查找，则其平均查找长度为 ()。,O (log₂n),O (√n),O (n),O (nlog₂n),B,5,c
二叉排序树 (BST),在二叉排序树中，左子树上所有结点的值均 () 根结点的值。,<,>,=,≤,A,3,a
二叉排序树 (BST),在二叉排序树中，右子树上所有结点的值均 () 根结点的值。,>,<,=,≤,A,3,a
二叉排序树 (BST),在二叉排序树中，中序遍历序列是 () 序列。,无序,有序,逆序,随机,B,3,a
平衡二叉树,平衡二叉树中每个结点的平衡因子的绝对值不超过 ()。,0,1,2,3,B,3,a
顺序查找,顺序查找方法适合于存储结构为（ ）的线性表,散列存储,索引存储,散列存储或索引存储,顺序存储或链接存储,D,1,a
折半查找,对线性表进行二分查找的时候，要求线性表必须（ ）。,以顺序存储方式,以链接存储方式,以顺序存储方式，且数据元素有序,以链接存储方式，且数据元素有序,C,1,a
分块查找,如果要求一个线性表既能较快地查找，又能动态适应变化要求，可以采用（ ）查找方法。,顺序,分块,折半,散列,B,2,b
线性表的存储结构,对于一个线性表，若要求既能进行较快地插入和删除，又要求存储结构能够反映数据元素之间的逻辑关系，则应该 ( ) 。,以顺序存储方式,以链接存储方式,以索引存储方式,以散列存储方式,B,2,b
顺序表的特点,在线性表的存储结构中，（ ）查找、插入和删除速度慢，但顺序存储和随机存取第 i 个元素速度快。,顺序表,链接表,散列表,索引表,A,2,a
顺序表的特点,在 ( ) 上查找和存取速度快，但插入和删除速度慢。,顺序表,链接表,顺序有序表,散列表,A,2,a
散列表的特点,在 ( ) 上查找、插入和删除速度快，但不能进行顺序存取。,顺序表,链接表,顺序有序表,散列表,D,2,a
链接表的特点,在 ( ) 上插入、删除和顺序存取速度快，但查找速度慢。,顺序表,链接表,顺序有序表,散列表,B,2,a
顺序查找的性能,采用顺序查找方法查找长度为 n 的线性表，查找每个元素的平均比较次数为 ( ),n,n/2,(n+1)/2,(n-1)/2,C,2,a
顺序查找的时间复杂度,顺序查找具有 n 个元素的线性表，其时间复杂度为 ( ) 。,O (n),O (log2n),O (n²),O (nlog2n),A,1,a
折半查找的时间复杂度,折半查找具有 n 个元素的线性表，其时间复杂度为 ( ) 。,O (n),O (log2n),O (n²),O (nlog2n),B,1,a
折半查找的应用,"己知一个有序表为 (11,22,33,44,55,66,77, 88,99), 则折半查找元素 55 需要比较 ( ) 次。",1,2,3,4,C,2,b
顺序查找的应用,"已知一个有序表为 (11,22,33,44,55,66,77,88,99), 则顺序查找元素 55 需要比较 ( ) 次。",3,4,5,6,C,2,b
顺序查找和折半查找的存储要求,顺序查找法与二分查找法对存储结构的要求是 ( ) 。,顺序查找与二分查找均只是适用于顺序表,顺序查找与二分查找均既适用于顺序表，也适用于链表,顺序查找只是适用于顺序表,二分查找适用于顺序表,D,2,b
动态查找表的概念,在对查找表的查找过程中，若被查找的数据元素不存在，则把该数据元素插到集合中。这种方式主要适合于 ( ) 。,静态查找表,动态查找表,静态查找表与动态查找表,两种表都不适合,B,2,a
折半查找的步骤,若用二分查找取得的中间位置元素关键字值大于被查找值，则说明被查找值位于中间值的前面，下次的查找区间为从原开始位置至 ( ) 。,该中间位置,该中间位置 - 1,该中间位置 + 1,该中间位置 1/2,B,2,b
二叉排序树的遍历,二叉排序树（ ）遍历序列是从小到大有序的。,先序,中序,后序,层序,B,1,a
B 树及其基本操作,m 阶 B 树中每个非叶子结点至少有 () 棵子树。,m/2,⌈m/2⌉,⌊m/2⌋,m-1,B,5,c
二叉排序树 (BST),在二叉排序树中，右子树上所有结点的值均 () 根结点的值。,>,<,=,≤,A,3,a
二叉排序树 (BST),在二叉排序树中，中序遍历序列是 () 序列。,无序,有序,逆序,随机,B,3,a
散列表的基本概念,散列函数有一个共同的性质，即函数值应当以 () 概率取其值域的每个值。,最大,最小,均匀,随机,C,4,b
散列表处理冲突的方法,处理散列冲突的方法不包括 ()。,线性探测法,链地址法,二分法,再哈希法,C,3,a
散列查找及性能分析,散列查找的平均查找长度 ()。,与处理冲突方法无关,与散列函数无关,与散列表长度无关,与装填因子有关,D,4,b
排序的定义,排序的稳定性是指 ()。,排序算法的时间复杂度稳定,排序算法的空间复杂度稳定,排序前后相同关键字的相对顺序不变,排序前后相同关键字的绝对顺序不变,C,3,a
直接插入排序,直接插入排序的时间复杂度为 ()。,O (n),O (n²),O (nlog₂n),O (log₂n),B,3,a
冒泡排序,冒泡排序在最好情况下的时间复杂度为 ()。,O (n),O (n²),O (nlog₂n),O (log₂n),A,4,b
快速排序,快速排序在平均情况下的时间复杂度为 ()。,O (n),O (n²),O (nlog₂n),O (log₂n),C,4,b
简单选择排序,简单选择排序的时间复杂度为 ()。,O (n),O (n²),O (nlog₂n),O (log₂n),B,3,a
堆排序,堆排序的时间复杂度为 ()。,O (n),O (n²),O (nlog₂n),O (log₂n),C,4,b
归并排序,归并排序的时间复杂度为 ()。,O (n),O (n²),O (nlog₂n),O (log₂n),C,4,b
基数排序,基数排序的时间复杂度为 ()。,O (n+k),O (n²),O (nk),O (klog₂n),C,5,c
基数排序,基数排序的时间复杂度为 ()。,O (n+k),O (n²),O (nk),O (klog₂n),C,5,c
插入排序的稳定性,直接插入排序是一种 () 的排序算法。,不稳定,稳定,外部,非线性,B,3,a
快速排序的最坏情况,快速排序在最坏情况下的时间复杂度为 ()。,O (n),O (n²),O (nlog₂n),O (log₂n),B,4,b
归并排序的稳定性,归并排序是一种 () 的排序算法。,不稳定,稳定,外部,选择,B,3,a
堆排序的稳定性,堆排序是一种 () 的排序算法。,稳定,不稳定,外部,插入,B,3,a
希尔排序的稳定性,希尔排序是一种 () 的排序算法。,稳定,不稳定,外部,交换,B,3,a
冒泡排序的稳定性,冒泡排序是一种 () 的排序算法。,稳定,不稳定,外部,选择,A,3,a
排序算法的比较,以下排序算法中，稳定的是 ()。,快速排序,堆排序,归并排序,希尔排序,C,4,b
排序算法的比较,以下排序算法中，不稳定的是 ()。,直接插入排序,冒泡排序,简单选择排序,归并排序,C,4,b
外部排序的基本概念,外部排序是指 ()。,排序过程中需访问外存,不需要使用内存,排序算法复杂,排序时间长,A,3,a
排序算法的比较次数,在所有的排序方法中，关键字比较的次数与记录初始排列秩序无关的是（）。,冒泡排序,希尔排序,直接选择排序,直接插人排序,C,3,b
插入排序的概念,从未排序序列中依次取出元素与已经排好序的序列中的元素作比较，将其放入已排序序列的正确位置上，此方法称为（）。,插人排序,选择排序,交换排序,归并排序,A,1,a
选择排序的概念,从未排序序列中挑选元素，并将其放人已排序序列的一端，此方法称为（）。,插入排序,交换排序,选择排序,归并排序,C,1,a
归并排序的概念,依次将每两个相邻的有序表合并成一个有序表的排序方法称为（）。,插人排序,交换排序,选择排序,归并排序,D,1,a
交换排序的概念,当两个元素出现逆序的时候就交换位置，这种排序方法称为（）。,插人排序,交换排序,选择排序,归并排序,B,1,a
快速排序的概念,每次把待排序的区间划分为左、右两个子区间，其中左区间中的记录的关键字均小于等于基准记录的关键字，右区间中记录的关键字均大于等于基准记录的关键字，这种排序称为（）。,插人排序,快速排序,堆排序,归并排序,B,1,a
插入排序的时间复杂度,在正常情况下，直接插人排序的时间复杂度为（）。,O (log2n),O (n),O (n log2n),O (n²),D,1,a
冒泡排序的时间复杂度,在正常情况下，冒泡排序的时间复杂度为（）。,O (log2n),O (n),O (nlog2n),O (n²),D,1,a
归并排序的趟数,在归并排序中，归并趟数的数量级为（）。,O (log2n）,O (n),O (nlog2n),O (n²),A,2,b
归并排序的性能,在归并排序中，每趟需要进行的记录比较和移动次数的数量级为（）。,O (log2n）,O (n),O (nlog2n),O (n²),B,2,b
归并排序的时间复杂度,归并排序算法时间复杂度为（）。,O (log2n）,O (n),O (nlog2n),O (n²),C,2,b
快速排序的平均时间复杂度,平均情况下，快速排序的时间复杂度为（）。,O (log2n）,O (n),O (nlog2n),O (n²),C,2,b
快速排序的最坏时间复杂度,最坏情况下，快速排序的时间复杂度为（）。,O（log2n）,O (n),O (nlog2n),O (n²),D,2,b
堆排序的性能,堆排序中，在每次筛运算中，记录比较和移动次数的数量级为（）。,O（log2n）,O (n),O (nlog2n),O (n²),A,3,c
堆排序的时间复杂度,堆排序算法时间复杂度为（）。,O（log2n）,O (n),O (nlog2n),O (n²),C,2,b
堆排序的应用,设有 800 条记录，希望用最快的方法挑选出其中前 10 个最大的元素，最好选用（）。,插人排序,快速排序,堆排序,归并排序,C,3,c
插入排序的最佳情况,在待排序元素基本有序的情况下，效率最高的排序方法是（）。,插入排序,快速排序,堆排序,归并排序,A,2,b
归并排序的空间复杂度,下面几种排序方法中，要求内存量最大的是（）。,插人排序,交换排序,选择排序,归并排序,D,2,b
排序算法的稳定性,在下列排序方法中，关键字比较的次数与记录的初始排列秩序无关的是（）方法。,希尔排序,冒泡排序,插人排序,选择排序,D,3,b
快速排序的最坏情况,快速排序方法在（）情况下最不利于发挥其长处。,要排序的数据量大大,要排序的数据中含有多个相同值,要排序的数据已基本有序,要排序的数据个数为奇数,C,2,b
二叉排序树的深度,若构造一棵具有 n 个结点的二又树排序，在最坏的情况下，其深度不会超过（）。,n/2,n,(n＋l)/2,n＋l,B,3,c
稳定排序算法,考察下列排序算法的稳定性，（ ）是稳定的排序算法。,直接插人排序、归并排序、冒泡排序,简单选择排序,快速排序,堆排序、希尔排序,A,3,c
内部排序算法的应用,当待排序序列基本有序时，最佳的排序算法是 ()。,快速排序,堆排序,冒泡排序,归并排序,C,4,b
内部排序算法的应用,当待排序序列长度 n 较小时，最佳的排序算法是 ()。,直接插入排序,快速排序,堆排序,归并排序,A,4,b
外部排序的基本概念,外部排序的基本操作是 ()。,归并和置换,排序和合并,置换 - 选择和归并,索引和排序,C,4,b
多路平衡归并与败者树,多路平衡归并中，使用败者树的目的是 ()。,减少归并次数,减少外存读写次数,提高内排序效率,减少内存占用,B,5,c
置换 - 选择排序,置换 - 选择排序生成的初始归并段长度 ()。,固定为内存工作区大小 ,平均为内存工作区大小的 2 倍 ,小于内存工作区大小 ,大于内存工作区大小 ,B,5,c
最佳归并树,构造最佳归并树时，应使权值 () 的叶结点尽量靠近根结点。,最大,最小,中等,任意,B,5,c
B + 树的基本概念,m 阶 B + 树中，非叶子结点的子树个数范围是 ()。,"[1, m]","[⌈m/2⌉, m]","[⌊m/2⌋, m]","[2, m]",B,5,c
外部排序的基本概念,外部排序的主要特点是 ()。,排序过程中需多次访问外存,排序数据量需小于内存容量,排序算法完全不需要内存参与,只能对磁盘文件进行排序,A,3,a
外部排序的基本步骤,外部排序的基本步骤是 ()。,生成初始归并段和多路归并,排序和索引,置换选择和败者树构造,内排序和外排序交替进行,A,4,b
置换 - 选择排序,置换 - 选择排序生成的初始归并段的平均长度约为 ()。,内存工作区大小的 1 倍,内存工作区大小的 2 倍,内存工作区大小的 1.5 倍,与内存工作区大小无关,B,5,c
多路平衡归并与败者树,败者树在多路归并中的主要作用是 ()。,减少磁盘读写次数,减少内存占用,减少比较次数,提高归并路数,C,5,c
最佳归并树,构造最佳归并树时，应使权值较小的叶结点尽量 () 根结点。,远离,靠近,随机分布于,位于,B,4,b
